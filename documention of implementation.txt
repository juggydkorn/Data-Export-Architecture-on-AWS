I would be using the following architecture on AWS:

ECS Cluster: As mentioned in the prompt, we can assume that billions of messages are coming to AWS ECS cluster behind a load balancer. This ECS cluster should have enough resources to handle the incoming messages.

S3 Bucket: We will store all the messaging data in an S3 bucket. S3 is highly scalable, durable, and secure. We can configure lifecycle policies to move data to Amazon S3 Glacier or S3 Glacier Deep Archive for long-term archival.

AWS Glue: AWS Glue is a fully managed ETL (Extract, Transform, and Load) service that makes it easy to move data between data stores. We can use AWS Glue to transform the messaging data into a format suitable for export purposes, e.g., CSV. We can schedule Glue jobs to run at regular intervals or trigger them based on events.

Athena: Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. We can create a database in Athena to store the transformed messaging data in CSV format. We can partition the data based on the date range so that it's possible to query the data efficiently based on the date range.

Quicksight: Amazon QuickSight is a business intelligence service that makes it easy to build visualizations, perform ad-hoc analysis, and quickly get business insights from your data. We can use QuickSight to create reports and dashboards based on the data stored in Athena.

Lambda: We can use AWS Lambda to send notifications to the users when the export file is ready for download. We can trigger the Lambda function when the Glue job is completed, and the CSV file is available in S3. The Lambda function can send an email to the user with a link to download the file.

API Gateway: We can create an API Gateway to expose the export functionality to the users. The API Gateway should authenticate the user and check whether the user belongs to the organization that owns the export file. If the user is authorized, the API Gateway can trigger a Lambda function to start the Glue job and export the data.

IAM: To ensure privacy, we can use AWS Identity and Access Management (IAM) to control access to the S3 bucket and the Athena database. We can create IAM roles for each organization and assign appropriate permissions to access their data.

With this architecture, we can meet all the requirements of the Data Export feature. The messaging data is stored in a highly scalable and durable S3 bucket. We can transform the data into CSV format using Glue and store it in an Athena database. Users can export data by providing date ranges, and the data can be queried efficiently using Athena. We can send notifications to the users when the export file is ready for download, and we can ensure privacy by using IAM to control access to the data.

--------------------------------

Here's a more detailed point-wise breakdown of the proposed CloudFormation template:

Create an ECS cluster and load balancer: The CloudFormation stack will create an ECS cluster and a load balancer to receive incoming messages. The ECS cluster should have enough resources to handle the incoming messages.

Create a Lambda function: The CloudFormation stack will create a Lambda function to handle incoming messages and store them in an S3 bucket. The Lambda function will be triggered when new messages arrive in the load balancer, and it will use the AWS SDK to store the messages in the S3 bucket.

Create an S3 bucket: The CloudFormation stack will create an S3 bucket to store the messaging data. The S3 bucket should be configured with versioning and server-side encryption. A lifecycle policy will also be configured to move data to Amazon S3 Glacier for long-term archival.

Create a Glue job: The CloudFormation stack will create a Glue job to transform the messaging data into CSV format and store it in an Athena database. The Glue job will be triggered by a CloudWatch event when new objects are added to the S3 bucket. The Glue job should partition the data based on the date range so that it's possible to query the data efficiently based on the date range.

Create an API Gateway: The CloudFormation stack will create an API Gateway to expose the export functionality to the users. The API Gateway should authenticate the user and check whether the user belongs to the organization that owns the export file. If the user is authorized, the API Gateway can trigger a Lambda function to start the Glue job and export the data. The API Gateway should be secured using IAM.

Create a Lambda function for notifications: The CloudFormation stack will create a Lambda function to send notifications to the users when the export file is ready for download. The Lambda function will be triggered by a CloudWatch event when the Glue job is completed, and the CSV file is available in S3. The Lambda function can send an email to the user with a link to download the file.

Configure QuickSight: The CloudFormation stack will configure QuickSight to create reports and dashboards based on the data stored in Athena. QuickSight should be configured with the appropriate IAM roles and permissions to access the data.

This CloudFormation template will automate the setup process and minimize user intervention as much as possible. Users will only need to provide date ranges to export the data, and they will receive notifications when the export file is ready for download.

-----------------------------------
The code for the Lambda functions that were referenced in the CloudFormation template:

'my-notification-function'
This Lambda function sends a notification email to the user when the export is complete.

'my-lambda-function'
This Lambda function triggers the Glue ETL job to export the messaging data and sends a notification email to the user when the export is complete.

This Lambda function triggers the Glue ETL job to export the messaging data using Athena, and then copies the query results from the S3 output location of the Athena query to an S3 bucket in CSV format.

It also sends a notification to the user via email and SQS message that the export is complete and the data is available for download.

The Lambda function takes in the following environment variables:

S3_BUCKET_NAME: The name of the S3 bucket where the exported data will be stored.
ATHENA_DATABASE: The name of the Athena database where the messaging data is stored.
ATHENA_QUERY_RESULT_BUCKET_NAME: The name of the S3 bucket where the query results from Athena will be stored.
ATHENA_NAMED_QUERY_NAME: The name of the named query in Athena that selects the messaging data.
START_DATE: The start date of the date range for the export in the format YYYY-MM-DD.
END_DATE: The end date of the date range for the export in the format YYYY-MM-DD.
SNS_TOPIC_ARN: The ARN of the SNS topic where notification emails will be published.
SQS_QUEUE_URL: The URL of the SQS queue where notification messages will be sent.